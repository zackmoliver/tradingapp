[tool:pytest]
# Pytest configuration for Options Trading Backtest Engine

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Add options
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov=adaptive
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
    --asyncio-mode=auto

# Markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    performance: marks tests as performance tests
    repository: marks tests for repository layer
    strategy: marks tests for strategy engine
    signals: marks tests for signals system
    risk: marks tests for risk management
    frontend: marks tests for frontend components
    adaptive: marks tests for adaptive intelligence module
    optimizer: marks tests for strategy optimization
    pattern: marks tests for pattern recognition
    rl: marks tests for reinforcement learning

# Test timeout
timeout = 300

# Async settings
asyncio_mode = auto

# Warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*sqlite3.*:UserWarning

# Log settings
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage settings
[coverage:run]
source = src,adaptive
omit =
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\(Protocol\):
    @abstractmethod
